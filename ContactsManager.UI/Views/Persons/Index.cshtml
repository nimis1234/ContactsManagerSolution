@model IEnumerable<PersonResponse>
@{

    var currentSortOrder = ViewBag.CurrentSortOrder;
    var currentSortBy = ViewBag.CurrentSortBy;

}
<head>
	<link rel="stylesheet" href="~/deleteModal.css" />
<style>
        a {
            text-decoration: none !important;
            color: white !important;
        }
</style>
</head>
<form action="/Persons/Index" method="get">
    <div class="container-fluid">
        <h1>Person List</h1>

        <!-- Search Section -->
        <div class="search-container">
            <div class="search-item">
                <label >Search By</label>
                <select name="searchBy" id="searchBy">
                    @foreach (var item in ViewBag.SearchFields)
                    {
                        @if (item.Key == ViewBag.CurrentSearchBy)
                        {
                            <option value="@item.Key" selected>@item.Value</option>
                        }
                        else { <option value="@item.Key">@item.Value</option> }
                    }
                    
                </select>
            </div>
            <div class="search-item">
                <label for="searchString" name="searchString">Search String</label>
                <input type="text" name="searchString" id="searchString" value="@ViewBag.CurrentSearchString" placeholder="Contains search" />
            </div>
            <div class="search-item">
                <input type="submit" value="Search" class="search-button" />
            </div>
            <div class="search-item">
                <a href="/Persons/Index" class="clear-button">Clear all</a>
            </div>
        </div>

        <div>

            <a href="/Persons/ExportToExcel" class="btn btn-success">Export to Excel</a>
			<a href="/Persons/ExportToPDF" class="btn btn-success">Export to PDF</a>
			<a href="/Persons/ExportToCSV" class="btn btn-success">Export to CSV</a>
        </div>


        <div>
            <table class="styled-table persontable">
                <thead>
                    @await Html.PartialAsync("_PersonTableHeaderPartial")
                </thead>
                <tbody>
                    @foreach (var person in Model)
                    {
                        <tr>
                            <td>@person.PersonName</td>
                            <td>@person.Email</td>
                            <td>@person.DateOfBirth</td>
                            <td>@person.Gender</td>
                            <td>@person.Country</td>
                            <td>@person.Address</td>
                            <td>@person.ReceiveNewsLetters</td>
                            <td>@person.Age</td>
                            <td>
                                <a  href="/Persons/EditPerson/@person.PersonID" class="btn-edit">Edit</a>
                                <a href="#" class="btn-delete " style="color:white"
                                   data-personid="@person.PersonID"
                                   data-personname="@person.PersonName">
                                    Delete
                                </a>
                              
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!--delete modal-->
            <!--delete modal-->
            <div id="deleteModal" class="modal" style="display:none">
                <div class="CustomModal-content">
                    <span class="close-button">&times;</span>
                    <p>Are you sure you want to delete <span id="modalPersonName"></span>?</p>
                    <div style="display:flex ;gap:10px;">
                        <button id="confirmDelete" class="btn btn-danger">Yes</button>
                        <button id="cancelDelete" class="btn btn-secondary">No</button>
                    </div>
                </div>
            </div>


        </div>
    </div>
</form>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const deleteButtons = document.querySelectorAll('.btn-delete');
        const deleteModal = document.getElementById('deleteModal');
        const modalPersonName = document.getElementById('modalPersonName');
        const confirmDelete = document.getElementById('confirmDelete');
        const closeButton = document.querySelector('.close-button');
        const cancelDelete = document.getElementById('cancelDelete');
        let selectedPersonId = null;

        // Open modal on delete button click
        deleteButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                selectedPersonId = e.target.getAttribute('data-personid');
                modalPersonName.textContent = e.target.getAttribute('data-personname');
                deleteModal.style.display = 'block';
            });
        });

        // Close modal on close button or cancel click
        const closeModal = () => {
            deleteModal.style.display = 'none';
            selectedPersonId = null;
        };

        closeButton.addEventListener('click', closeModal);
        cancelDelete.addEventListener('click', closeModal);

        confirmDelete.addEventListener('click', async () => {
            if (selectedPersonId) {
                confirmDelete.disabled = true; // Disable button to prevent multiple clicks
                confirmDelete.textContent = 'Deleting...'; // Provide feedback to the user

                try {
                    const response = await fetch(`/Persons/DeletePerson/${selectedPersonId}`, {
                        method: "GET",
                        cache: "no-cache",
                    });

                    if (response.ok) {
                       window.location.href = '/Persons/Index'; // Redirect after a short delay
                       
                    } else {
                        const errorData = await response.json(); // Assuming the server returns JSON with error details
                        console.error("Failed to delete person:", errorData.message);
                        alert(`Failed to delete person: ${errorData.message}`);
                    }
                } catch (error) {
                    console.error("Error:", error);
                    alert("An error occurred while deleting the person. Please check your connection and try again.");
                } 
            }
        });
    });
</script>

 